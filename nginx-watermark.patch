--- src/http/modules/ngx_http_image_filter_module.c
+++ src/http/modules/ngx_http_image_filter_module.c
@@ -18,7 +18,6 @@
 #define NGX_HTTP_IMAGE_RESIZE    3
 #define NGX_HTTP_IMAGE_CROP      4
 #define NGX_HTTP_IMAGE_ROTATE    5
-#define NGX_HTTP_IMAGE_WATERMARK 6
 
 
 #define NGX_HTTP_IMAGE_START     0
@@ -47,16 +46,12 @@ typedef struct {
 
     ngx_flag_t                   transparency;
     ngx_flag_t                   interlace;
-    ngx_str_t                    watermark;
-    ngx_str_t                    watermark_position;
 
     ngx_http_complex_value_t    *wcv;
     ngx_http_complex_value_t    *hcv;
     ngx_http_complex_value_t    *acv;
     ngx_http_complex_value_t    *jqcv;
     ngx_http_complex_value_t    *shcv;
-    ngx_http_complex_value_t    *wfcv;
-    ngx_http_complex_value_t    *wpcv;
 
     size_t                       buffer_size;
 } ngx_http_image_filter_conf_t;
@@ -149,7 +144,7 @@ static ngx_command_t  ngx_http_image_fil
       offsetof(ngx_http_image_filter_conf_t, transparency),
       NULL },
 
-   { ngx_string("image_filter_interlace"),
+    { ngx_string("image_filter_interlace"),
       NGX_HTTP_MAIN_CONF|NGX_HTTP_SRV_CONF|NGX_HTTP_LOC_CONF|NGX_CONF_FLAG,
       ngx_conf_set_flag_slot,
       NGX_HTTP_LOC_CONF_OFFSET,
@@ -163,20 +158,6 @@ static ngx_command_t  ngx_http_image_fil
       offsetof(ngx_http_image_filter_conf_t, buffer_size),
       NULL },
 
-    { ngx_string("image_filter_watermark"),
-      NGX_HTTP_MAIN_CONF|NGX_HTTP_SRV_CONF|NGX_HTTP_LOC_CONF|NGX_CONF_TAKE1,
-      ngx_conf_set_str_slot,
-      NGX_HTTP_LOC_CONF_OFFSET,
-      offsetof(ngx_http_image_filter_conf_t, watermark),
-      NULL },
-
-    { ngx_string("image_filter_watermark_position"),
-      NGX_HTTP_MAIN_CONF|NGX_HTTP_SRV_CONF|NGX_HTTP_LOC_CONF|NGX_CONF_TAKE1,
-      ngx_conf_set_str_slot,
-      NGX_HTTP_LOC_CONF_OFFSET,
-      offsetof(ngx_http_image_filter_conf_t, watermark_position),
-      NULL },
-
       ngx_null_command
 };
 
@@ -550,18 +531,6 @@ ngx_http_image_process(ngx_http_request_
         return ngx_http_image_resize(r, ctx);
     }
 
-    ctx->watermark = ngx_http_image_filter_get_value(r, conf->wfcv, ctx->watermark);
-    ctx->watermark_position = ngx_http_image_filter_get_value(r, conf->wpcv, ctx->watermark_position);
-
-    if (conf->filter == NGX_HTTP_IMAGE_WATERMARK) {
-
-        if (!ctx->watermark.data) {
-            return NULL;
-        }
-
-        return ngx_http_image_resize(r, ctx);
-    }
-
     ctx->max_width = ngx_http_image_filter_get_value(r, conf->wcv, conf->width);
     if (ctx->max_width == 0) {
         return NULL;
@@ -768,7 +737,7 @@ ngx_http_image_size(ngx_http_request_t *
     }
 
     ngx_log_debug2(NGX_LOG_DEBUG_HTTP, r->connection->log, 0,
-                   "image size: %d x %d", width, height);
+                   "image size: %d x %d", (int) width, (int) height);
 
     ctx->width = width;
     ctx->height = height;
@@ -858,10 +827,6 @@ transparent:
 
         resize = 0;
 
-    } else if (conf->filter == NGX_HTTP_IMAGE_WATERMARK) {
-
-        resize = 0;
-
     } else { /* NGX_HTTP_IMAGE_CROP */
 
         resize = 0;
@@ -1007,49 +972,6 @@ transparent:
         gdImageColorTransparent(dst, gdImageColorExact(dst, red, green, blue));
     }
 
-    if (conf->filter == NGX_HTTP_IMAGE_WATERMARK && ctx->watermark.data) {
-        FILE *watermark_file = fopen((const char *)ctx->watermark.data, "r");
-
-        if (watermark_file) {
-            gdImagePtr watermark, watermark_mix;
-            ngx_int_t wdx = 0, wdy = 0;
-
-            watermark = gdImageCreateFromPng(watermark_file);
-            fclose(watermark_file);
-
-            if(watermark != NULL) {
-                watermark_mix = gdImageCreateTrueColor(watermark->sx, watermark->sy);
-
-                if (ngx_strcmp(ctx->watermark_position.data, "bottom-right") == 0) {
-                    wdx = dx - watermark->sx - 10;
-                    wdy = dy - watermark->sy - 10;
-                } else if (ngx_strcmp(ctx->watermark_position.data, "top-left") == 0) {
-                    wdx = wdy = 10;
-                } else if (ngx_strcmp(ctx->watermark_position.data, "top-right") == 0) {
-                    wdx = dx - watermark->sx - 10;
-                    wdy = 10;
-                } else if (ngx_strcmp(ctx->watermark_position.data, "bottom-left") == 0) {
-                    wdx = 10;
-                    wdy = dy - watermark->sy - 10;
-                } else if (ngx_strcmp(ctx->watermark_position.data, "center") == 0) {
-                    wdx = dx / 2 - watermark->sx / 2;
-                    wdy = dy / 2 - watermark->sy / 2;
-                }
-
-                gdImageCopy(watermark_mix, dst, 0, 0, wdx, wdy, watermark->sx, watermark->sy);
-                gdImageCopy(watermark_mix, watermark, 0, 0, 0, 0, watermark->sx, watermark->sy);
-                gdImageCopyMerge(dst, watermark_mix, wdx, wdy, 0, 0, watermark->sx, watermark->sy, 75);
-                gdImageDestroy(watermark);
-                gdImageDestroy(watermark_mix);
-
-            } else { ngx_log_error(NGX_LOG_ERR, r->connection->log, 0, "watermark file '%s' is not PNG", ctx->watermark.data);}
-
-        } else {
-
-            ngx_log_error(NGX_LOG_ERR, r->connection->log, 0, "watermark file '%s' not found", ctx->watermark.data);
-        }
-    }
-
     sharpen = ngx_http_image_filter_get_value(r, conf->shcv, conf->sharpen);
     if (sharpen > 0) {
         gdImageSharpen(dst, sharpen);
@@ -1335,10 +1257,6 @@ ngx_http_image_filter_merge_conf(ngx_con
     ngx_conf_merge_size_value(conf->buffer_size, prev->buffer_size,
                               1 * 1024 * 1024);
 
-    ngx_conf_merge_str_value(conf->watermark, prev->watermark, "");
-
-    ngx_conf_merge_str_value(conf->watermark_position, prev->watermark_position, "bottom-right");
-
     return NGX_CONF_OK;
 }
 
@@ -1414,23 +1332,11 @@ ngx_http_image_filter(ngx_conf_t *cf, ng
 
             return NGX_CONF_OK;
 
-        } else if (ngx_strcmp(value[i].data, "watermark") == 0) {
-            imcf->filter = NGX_HTTP_IMAGE_WATERMARK;
-            imcf->watermark = value[2];
-            return NGX_CONF_OK;
-
         } else {
             goto failed;
         }
     }
 
-    if ((ngx_strcmp(value[i].data, "watermark") == 0) && cf->args->nelts == 4) {
-        imcf->filter = NGX_HTTP_IMAGE_WATERMARK;
-        imcf->watermark = value[2];
-        imcf->watermark_position = value[3];
-        return NGX_CONF_OK;
-    }
-
     if (ngx_strcmp(value[i].data, "resize") == 0) {
         imcf->filter = NGX_HTTP_IMAGE_RESIZE;
 
